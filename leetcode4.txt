OR36 链表的回文结构
1.解法1 创建数组存储链表元素，然后双指针遍历数组比较
class PalindromeList {
public:
    bool chkPalindrome(ListNode* A) {
        // write code here
        ListNode * p=A;
        int arr[900];
        int n=0;
        while(p!=NULL)
        {
            arr[n++]=p->val;
            p=p->next;
        }
        int t=0;
        int x=n-1;
        while(t<x)
        {
            if(arr[t]!=arr[x])
            {
                return false;
            }
            t++;
            x--;
        }
        return true;
    }
};

2.解法2 找到中间结点，将中间结点之后的链表反转，并将原链表于中间结点断开，在进行遍历比较，若有不同则返回false，否则返回true，判断完之后再恢复成原链表。


160.相交链表
解法一.尾部地址比较法
struct ListNode *getIntersectionNode(struct ListNode *headA, struct ListNode *headB) {
    struct ListNode *a[30000];
    struct ListNode *b[30000];
    struct ListNode * p=headA;
    struct ListNode * q=headB;
    int n=0;
    while(p!=NULL)
    {
        a[n++]=p;
        p=p->next;
    }
    int i=0;
    while(q!=NULL)
    {
        b[i++]=q;
        q=q->next;
    }
    n=n-1;//指向最后一个有效元素
    i=i-1;
    if(a[n]==b[i])
    {

        while(n>0 && i>0 && a[n-1]==b[i-1])
        {
              n--;
              i--;
        }
       p=a[n];
       return p;
    }
    else
      return NULL;
}
解法2:
分别求出两者的长度，然后让长的一个链表的指针先向后移动两个链表长度差值的步数，从而使两者处于同一长度起步点，向后移动判断是否相交。

141.环形链表
思路一：利用快慢指针来确定是否有环
bool hasCycle(struct ListNode *head) {
    struct ListNode * p=head;
    struct ListNode * q=head;
    while(q!=NULL && q->next!=NULL)
    {
        p=p->next;
        q=q->next->next;//第一次判断不能从出发结点开始
        if(q==p)
        {
            return true;
        }
    }
    return false;
}
思路二：可以只用单指针，利用指针数组存储每个结点对应的地址，指针每往后移一次，就与指针数组进行一次遍历比较，如果存在相等的情况就返回true，如果指针后移后为空，则返回false。

142.环形链表二
思路一：单指针加数组
struct ListNode *detectCycle(struct ListNode *head) {
    struct ListNode * a[10000];
    struct ListNode * p=head;
    int n=0;
    while(p!=NULL)
    {
        a[n++]=p;
        p=p->next;
        for(int i =0;i<n;i++)
        {
            if(a[i]==p)
            return a[i];
        }
    }
    return NULL;
}
思路二：先用快慢指针判断是否有环，当确定有环后，将快指针返回链表头，并用慢指针的速度和慢指针一起next，初始点离入环点的步数刚好能使相遇点走到入环点。

138.复制带随机指针的链表

思路一：借助数组进行拷贝，新创建结点将原节点的值和random指向的位置都进行拷贝从而达到深拷贝的效果
/**
 * Definition for a Node.
 * struct Node {
 *     int val;
 *     struct Node *next;
 *     struct Node *random;
 * };
 */
struct Node * _BuyNode(int val)
{
    struct Node * s =(struct Node*)malloc(sizeof(struct Node));
    s->val=val;
    s->next=NULL;
    s->random=NULL;
    return s;
}

struct Node* copyRandomList(struct Node* head) {
    struct Node * r[1000];
    struct Node * p=head;
    struct Node * q=NULL;
    struct Node * s=NULL;
    int pos[1000];//pos用来存储random指向的位置
    int x=0;
    int i=0;//i用于存储链表有效长度
    if(p==NULL)
      return q;
    while(p!=NULL)
    {
        if(p->random==NULL)
        {
            pos[i++]=-9999;
        }
        else
        {
            s=head;
            for(int j =0;s!=NULL;j++)
            {
                if(p->random== s)
                {
                    pos[i++]=j;
                    break;
                }
                s=s->next;
            }
        }
        p=p->next;
    }
    p=head;
    for(int j=0;j<i;j++)//新创建结点放到数组中，并赋对应值
    {
        x=p->val;
        p=p->next;
        q=_BuyNode(x);
        r[j]=q;
        q=NULL;
    }
    for(int j =0;j<i;j++)//此处如果想用q=q->next则需先链接新创建的各结点
    {
        q=r[j];
        if(pos[j]==-9999)
        {
            q->random=NULL;
        }
        else
        {
            q->random=r[(pos[j])];
        }
    }
    q=r[0];
    for(int j=1;j<i;j++)
    {
        q->next=r[j];
        q=q->next;
    }
    return r[0];//r[0]为新链表的起始结点
} 
思路二：首先赋值原始结点的值创建新结点，同时把<N,N'>的配对信息放到一个哈希表中，第二步还是设置复制链表的random，如果在N中random指向S，那么对应N'就应该指向S‘，由于有了哈希表，我们可以用O(1)的时间根据S找到S’
思路三：在N后创建N‘，N指向S，N指向S->next，即S’,因为S‘一定是S->next,再断开链表或者删除原链表的结点。 